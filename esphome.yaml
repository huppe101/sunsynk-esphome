esphome:
  name: esphome-web-337cf0
  friendly_name: SunsynkESP

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: YOUR SECRET KEY

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-337Cf0"
    password: "LbktWvdqb1d6"

captive_portal:

substitutions:
  modbus_update_interval: "5000ms"
  settings_skipped_updates: "10"
  query_throttle: "1000ms"
  device_name: sunsynk

# https://esphome.io/components/time.html#home-assistant-time-source
time:
  - platform: homeassistant
    id: homeassistant_time

uart:
 id: mod_bus
# Check your ESP'sRX and TX
# RX2 = GPIO 16 = Pin25
# TX2 = GPIO 17 = Pin27
 tx_pin: 17
 rx_pin: 16
 baud_rate: 9600
 stop_bits: 1
 
modbus:
 id: sunsynk_modbus
#Check your ESP's flow-pin
 flow_control_pin: 5


modbus_controller:
 - id: sunsynk_esphome
   address: 0x01
   modbus_id: sunsynk_modbus
   setup_priority: -10
   update_interval: ${modbus_update_interval}
   command_throttle: ${query_throttle}

sensor: 
 - platform: modbus_controller          #72 and 73 Battery Charge Total unsigned 32 bit integer from 2 registers low word first
   modbus_controller_id: sunsynk_esphome
   name: "Battery Charge Total"
   id: sunsynk_esphome_battery_charge_total
   register_type: holding
   address: 72
   unit_of_measurement: "kWh"
   accuracy_decimals: 1
   device_class: energy
   state_class: total_increasing
   value_type: U_DWORD_R
   filters:
    - multiply: 0.1

 - platform: modbus_controller          #74 and 75 Battery Discharge Total unsigned 32 bit integer from 2 registers low word first
   modbus_controller_id: sunsynk_esphome
   name: "Battery Discharge Total"
   id: sunsynk_esphome_battery_discharge_total
   register_type: holding
   address: 74
   unit_of_measurement: "kWh"
   accuracy_decimals: 0
   device_class: energy
   state_class: total_increasing
   value_type: U_DWORD_R
   filters:
    - multiply: 0.1


# - platform: modbus_controller          # 81 abd 82 Grid Export Total (Sell) unsigned 32 bit integer from 2 registers low word first
#   modbus_controller_id: sunsynk_esphome
#   name: "Grid Export Total (Sell)"
#   id: sunsynk_esphome_grid_export_total_sell
#   register_type: holding
#   address: 81
#   unit_of_measurement: "kWh"
#   accuracy_decimals: 2
#   device_class: energy
#   state_class: total_increasing
#   value_type: U_DWORD_R
#   filters:
#     - multiply: 0.1
##    - lambda: |-
##           if (x > 32767) return (x - 65535) / 10;
##           else return x /10;

 - platform: modbus_controller          # 78 and 80 Grid Import Total (Buy) unsigned 32 bit integer from 2 registers low word first
 #There is one parameter (Grid Import Total) where the values aren't on consecutive registers - 78 and 80. I don't know how to configure this & would need to read up in more detail.
   modbus_controller_id: sunsynk_esphome
   name: "Grid Import Total (Buy)"
   id: sunsynk_esphome_grid_import_total_buy
   register_type: holding
   address: 78
   unit_of_measurement: "kWh"
   accuracy_decimals: 0
   device_class: energy
   state_class: total_increasing
   filters: #GOOD
    - lambda: |-
           x = x / -1;
           if (x > 32767) return (0 - x + 65535) /1;
           else return (0 - x) /1;
 - platform: modbus_controller          # 85 and 86 Load Power Total unsigned 32 bit integer from 2 registers low word first
   modbus_controller_id: sunsynk_esphome
   name: "Load Power Total"
   id: sunsynk_esphome_load_power_total
   register_type: holding
   address: 85
   unit_of_measurement: "kWh"
   accuracy_decimals: 0
   device_class: energy
   state_class: total_increasing
   value_type: U_DWORD_R


 - platform: modbus_controller          # 164 Inverter Output Current
   modbus_controller_id: sunsynk_esphome
   name: "Inverter Output Current"
   id: sunsynk_esphome_inverter_output_current
   register_type: holding
   address: 164
   unit_of_measurement: "A"
   accuracy_decimals: 1
   device_class: current
   state_class: measurement
   value_type: S_WORD
   filters: #GOOD
     - multiply: 0.01


 - platform: modbus_controller          # 166 Aux Output Power
   modbus_controller_id: sunsynk_esphome
   name: "Aux Output Power"
   id: sunsynk_esphome_aux_output_power
   register_type: holding
   address: 166
   unit_of_measurement: "W"
   accuracy_decimals: 0
   device_class: power
   state_class: measurement
   value_type: S_WORD


 - platform: modbus_controller          # 178 Load Power
   modbus_controller_id: sunsynk_esphome
   name: "Load Power"
   id: sunsynk_esphome_load_power
   register_type: holding
   address: 178
   unit_of_measurement: "W"
   accuracy_decimals: 0
   device_class: power
   state_class: measurement
   value_type: S_WORD

################
# Solar Power 1
################

 - platform: modbus_controller          # 186 PV1 Power
   modbus_controller_id: sunsynk_esphome
   name: "PV1 Power"
   id: sunsynk_esphome_pv1_power
   register_type: holding
   address: 186
   unit_of_measurement: "W"
   accuracy_decimals: 0
   device_class: power
   state_class: measurement
   
 - platform: modbus_controller         # 109 PV1 Voltage
   modbus_controller_id: sunsynk_esphome
   name: "PV1 Voltage"
   id: sunsynk_esphome_pv1_voltage
   register_type: holding
   address: 109
   unit_of_measurement: "V"
   accuracy_decimals: 1
   filters: #GOOD
     - lambda: |-
           if (x > 32767) return (x - 65535) /10;
           else return (x) /10;
   device_class: voltage
   state_class: measurement

 - platform: modbus_controller          # 110 PV1 Current
   modbus_controller_id: sunsynk_esphome
   name: "PV1 Output Current"
   id: sunsynk_esphome_PV1_output_current
   register_type: holding
   address: 110
   unit_of_measurement: "A"
   accuracy_decimals: 1
   device_class: current
   state_class: measurement
   value_type: S_WORD
   filters: #GOOD
     - multiply: 0.01

################
# Solar Power 2
################

 - platform: modbus_controller          # 187 PV2 Power
   modbus_controller_id: sunsynk_esphome
   name: "PV2 Power"
   id: sunsynk_esphome_pv2_power
   register_type: holding
   address: 187
   unit_of_measurement: "W"
   accuracy_decimals: 0
   device_class: power
   state_class: measurement

 - platform: modbus_controller         # 111 PV2 Voltage
   modbus_controller_id: sunsynk_esphome
   name: "PV2 Voltage"
   id: sunsynk_esphome_pv2_voltage
   register_type: holding
   address: 111
   unit_of_measurement: "V"
   accuracy_decimals: 1
   filters: #GOOD
     - lambda: |-
           if (x > 32767) return (x - 65535) /10;
           else return (x) /10;
   device_class: voltage
   state_class: measurement

 - platform: modbus_controller          # 112 PV2 Current
   modbus_controller_id: sunsynk_esphome
   name: "PV2 Output Current"
   id: sunsynk_esphome_PV2_output_current
   register_type: holding
   address: 112
   unit_of_measurement: "A"
   accuracy_decimals: 1
   device_class: current
   state_class: measurement
   value_type: S_WORD
   filters: #GOOD
     - multiply: 0.01

 - platform: template                   # Sum of PV1 and PV2 to get total PV Power
   name: "Total Solar"
   unit_of_measurement: "W"
   accuracy_decimals: 0
   device_class: power
   state_class: measurement
   lambda: |-
     return (id(sunsynk_esphome_pv1_power).state + id(sunsynk_esphome_pv2_power).state);
   update_interval: 5s



 - platform: modbus_controller          # 184 Battery SOC
   modbus_controller_id: sunsynk_esphome
   name: "Battery SOC"
   id: sunsynk_esphome_battery_soc
   register_type: holding
   address: 184
   unit_of_measurement: "%"
   accuracy_decimals: 0
   device_class: battery
   state_class: measurement
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 184 Battery Usable SOC
   modbus_controller_id: sunsynk_esphome
   name: "Battery Usable SOC"
   id: sunsynk_esphome_battery__usable_soc
   register_type: holding
   address: 184
   unit_of_measurement: "%"
   accuracy_decimals: 1
   device_class: battery
   state_class: measurement
   filters: #GOOD
   # battery normally charges to 99%, shutdown level is 20%, so subtract 19 from value and calculate as percentage divided by 80
    - lambda: |-
           if (x > 32767) {
              int y = ((((x - 65535) -19) /80) *100) /1; 
              if (y > 100) return 100;
              return y;
           }
           else {
              int y = (((x -19) /80) *100) /1;
              if (y > 100) return 100;
              return y;
           }
 - platform: modbus_controller          # 216 Battery Charging Efficiency
   modbus_controller_id: sunsynk_esphome
   name: "Battery Charging Efficiency"
   id: sunsynk_esphome_battery_charging_efficiency
   register_type: holding
   address: 216
   unit_of_measurement: "%"
   accuracy_decimals: 1
   device_class: battery
   state_class: measurement
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /10;
           else return (x) /10;
 - platform: modbus_controller          # 013 Firmware Control Board
   modbus_controller_id: sunsynk_esphome
   name: "Firmware Control Board"
   id: sunsynk_esphome_firmware_control_board
   register_type: holding
   address: 13

 - platform: modbus_controller          # 014 Firmware Comms Board
   modbus_controller_id: sunsynk_esphome
   name: "Firmware Comms Board"
   id: sunsynk_esphome_firmware_comms_board
   register_type: holding
   address: 14

#############
# Grid Power
#############

 - platform: modbus_controller          # 079 Grid Frequency
   modbus_controller_id: sunsynk_esphome
   name: "Grid Frequency"
   id: sunsynk_esphome_grid_frequency
   register_type: holding
   address: 79
   unit_of_measurement: "Hz"
   accuracy_decimals: 2
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /100;
           else return (x) /100;
   device_class: frequency
   state_class: measurement

 - platform: modbus_controller          # 169 Grid Power
   modbus_controller_id: sunsynk_esphome
   name: "Grid Power"
   id: sunsynk_esphome_grid_power
   register_type: holding
   address: 169
   unit_of_measurement: "W"
   accuracy_decimals: 0
   device_class: power
   state_class: measurement
   value_type: S_WORD

 - platform: modbus_controller          # 167 Grid LD power
   modbus_controller_id: sunsynk_esphome
   name: "Grid LD Power"
   id: sunsynk_esphome_grid_LD_power
   register_type: holding
   address: 167
   unit_of_measurement: "W"
   accuracy_decimals: 0
   value_type: S_WORD
   device_class: power
   state_class: measurement

 - platform: modbus_controller          # 168 Grid LD2 power
   modbus_controller_id: sunsynk_esphome
   name: "Grid LD Power"
   id: sunsynk_esphome_grid_LD2_power
   register_type: holding
   address: 168
   unit_of_measurement: "W"
   accuracy_decimals: 0
   value_type: S_WORD
   device_class: power
   state_class: measurement
  
 - platform: modbus_controller         # 150 Grid Voltage
   modbus_controller_id: sunsynk_esphome
   name: "Grid Voltage"
   id: sunsynk_esphome_grid_voltage
   register_type: holding
   address: 150
   unit_of_measurement: "V"
   accuracy_decimals: 1
   filters: #GOOD
     - lambda: |-
           if (x > 32767) return (x - 65535) /10;
           else return (x) /10;
   device_class: voltage
   state_class: measurement

#MathSensor((160, 161), "Grid current", AMPS, factors=(0.01, 0.01)),

 - platform: modbus_controller          # 172 Grid CT Power
   modbus_controller_id: sunsynk_esphome
   name: "Grid CT Power"
   id: sunsynk_esphome_grid_external_power
   register_type: holding
   address: 172
   unit_of_measurement: "W"
   accuracy_decimals: 0
   device_class: power
   state_class: measurement
   value_type: S_WORD

# end of Grid.


 - platform: modbus_controller          # 183 Battery Voltage
   modbus_controller_id: sunsynk_esphome
   name: "Battery Voltage"
   id: sunsynk_esphome_battery_voltage
   register_type: holding
   address: 183
   unit_of_measurement: "V"
   accuracy_decimals: 1
   filters: #GOOD
     - lambda: |-
           if (x > 32767) return (x - 65535) / 100;
           else return x / 100;
   device_class: voltage
   state_class: measurement

 - platform: modbus_controller          # 312 Battery Charge Voltage
   modbus_controller_id: sunsynk_esphome
   name: "Battery Charge Voltage"
   id: sunsynk_esphome_battery_charge_voltage
   register_type: holding
   address: 312
   unit_of_measurement: "V"
   accuracy_decimals: 1
   filters: #GOOD
     - lambda: |-
           x = x / -1;
           if (x > 32767) return (0 - x + 65535) /100;
           else return (0 - x) /100;
   device_class: voltage
   state_class: measurement

 - platform: modbus_controller          # 190 Battery Output Power
   modbus_controller_id: sunsynk_esphome
   name: "Battery Output Power"
   id: sunsynk_esphome_battery_output_power
   register_type: holding
   address: 190
   unit_of_measurement: "W"
   accuracy_decimals: 1
   device_class: power
   state_class: measurement
   value_type: S_WORD

 - platform: modbus_controller          # 191 Battery Output Current
   modbus_controller_id: sunsynk_esphome
   name: "Battery Output Current"
   id: sunsynk_esphome_battery_output_current
   register_type: holding
   address: 191
   unit_of_measurement: "A"
   accuracy_decimals: 1
   device_class: current
   state_class: measurement
   value_type: S_WORD
   filters: #GOOD
     - multiply: 0.01

 - platform: modbus_controller          # 192 Load Frequency
   modbus_controller_id: sunsynk_esphome
   name: "Load Frequency"
   id: sunsynk_esphome_load_frequency
   register_type: holding
   address: 192
   unit_of_measurement: "Hz"
   accuracy_decimals: 2
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /100;
           else return (x) /100;
   device_class: frequency
   state_class: measurement

 - platform: modbus_controller          # 182 Battery Temperature
   modbus_controller_id: sunsynk_esphome
   name: "Battery Temperature"
   id: sunsynk_esphome_battery_temperature
   register_type: holding
   address: 182
   unit_of_measurement: "°C"
   accuracy_decimals: 1
   device_class: temperature
   state_class: measurement
   filters: # GOOD
    - lambda: |-
           if (x > 32767) return ((x - 65535)-1000) / 10;
           else return ((x)-1000) / 10;
# - platform: modbus_controller
#   modbus_controller_id: sunsynk_esphome
#   name: "Environment Temp"
#   id: sunsynk_esphome_environment_temperature
#   register_type: holding
#   address: 095
#   unit_of_measurement: "°C"
#   accuracy_decimals: 0
#   device_class: temperature
#   state_class: measurement
#   filters:
#     - multiply: 0.1

 - platform: modbus_controller          # 090 DC Transformer Temperature
   modbus_controller_id: sunsynk_esphome
   name: "DC Transformer Temperature"
   id: sunsynk_esphome_dctransformer_temperature
   register_type: holding
   address: 090
   unit_of_measurement: "°C"
   accuracy_decimals: 1
   device_class: temperature
   state_class: measurement
   filters: # GOOD
    - lambda: |-
           if (x > 32767) return ((x - 65535)-1000) / 10;
           else return ((x)-1000) / 10;
 - platform: modbus_controller          # 091 Radiator Temperature
   modbus_controller_id: sunsynk_esphome
   name: "DC Radiator Temperature"
   id: sunsynk_esphome_radiator_temperature
   register_type: holding
   address: 091
   unit_of_measurement: "°C"
   accuracy_decimals: 1
   device_class: temperature
   state_class: measurement
   filters: # GOOD
    - lambda: |-
           if (x > 32767) return ((x - 65535)-1000) / 10;
           else return ((x)-1000) / 10;
 - platform: modbus_controller          #076 Grid Import Day (Buy)
   modbus_controller_id: sunsynk_esphome
   name: "Grid Import Day (Buy)"
   id: sunsynk_esphome_grid_import_day
   register_type: holding
   address: 76
   unit_of_measurement: "kWh"
   accuracy_decimals: 0
   device_class: energy
   state_class: total_increasing
   filters: # GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) / 10;
           else return x /10;
 - platform: modbus_controller          # 070 Battery Charge Day
   modbus_controller_id: sunsynk_esphome
   name: "Battery Charge Day"
   id: sunsynk_esphome_battery_charge_day
   register_type: holding
   address: 70
   unit_of_measurement: "kWh"
   accuracy_decimals: 1
   device_class: energy
   state_class: total_increasing
   filters: #GOOD
    - lambda: |-
           x = x / 10;
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 071 Battery Discharge Day
   modbus_controller_id: sunsynk_esphome
   name: "Battery Discharge Day"
   id: sunsynk_esphome_battery_discharge_day
   register_type: holding
   address: 71
   unit_of_measurement: "kWh"
   accuracy_decimals: 1
   device_class: energy
   state_class: total_increasing
   filters: #GOOD
    - lambda: |-
           x = x / 10;
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;

#################
# Inverter Power
#################
 - platform: modbus_controller          # 175 Inverter Output Power
   modbus_controller_id: sunsynk_esphome
   name: "Inverter Output Power"
   id: sunsynk_esphome_inverter_output_power
   register_type: holding
   address: 175
   unit_of_measurement: "W"
   accuracy_decimals: 1
   device_class: power
   value_type: S_WORD

 - platform: modbus_controller          # 154 Grid Inverter Voltage
   modbus_controller_id: sunsynk_esphome
   name: "Grid Inverter Voltage"
   id: sunsynk_esphome_grid_inverter_voltage
   register_type: holding
   address: 154
   unit_of_measurement: "V"
   accuracy_decimals: 1
   filters: #GOOD
     - lambda: |-
           if (x > 32767) return (x - 65535) /10;
           else return (x) /10;
   device_class: voltage
   state_class: measurement

 - platform: modbus_controller          # 193 Inverter Frequency
   modbus_controller_id: sunsynk_esphome
   name: "Inverter frequency"
   id: sunsynk_esphome_inverter_frequency
   register_type: holding
   address: 193
   unit_of_measurement: "Hz"
   accuracy_decimals: 2
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /100;
           else return (x) /100;
   device_class: frequency
   state_class: measurement
  #End of Inverter Power

#MathSensor((175, 169, 166), "Essential power", WATT, factors=(1, 1, -1), absolute=True

 - platform: template                   # Calculate Essential Load
   name: "Essential Load"
   unit_of_measurement: "W"
   accuracy_decimals: 0
   device_class: power
   state_class: measurement
   lambda: |-
     return abs(int(round((float(id(sunsynk_esphome_inverter_output_power).state) - float(id(sunsynk_esphome_aux_output_power).state) - float(id(sunsynk_esphome_grid_power).state)))));
   update_interval: 5s

#Non-Essential load:

#MathSensor((172, 167), "Non-Essential power", WATT, factors=(1, -1), no_negative=True
#172 = sunsynk_esphome_grid_external_power (CT)
#167 = sunsynk_esphome_grid_LD_power
 - platform: template                   # Calculate non-Essential Load
   name: "Non-Essential Load"
   unit_of_measurement: "W"
   accuracy_decimals: 0
   device_class: power
   state_class: measurement
   lambda: |-
     return abs(int(round((float(id(sunsynk_esphome_grid_external_power).state) - float(id(sunsynk_esphome_grid_LD_power).state)))));
   update_interval: 5s

################################################ READ SETTINGS ################################################
 - platform: modbus_controller          # 250 Settings Timezone1
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Timezone1"
   id: sunsynk_esphome_setting_timezone1
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 250
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 251 Settings Timezone2
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Timezone2"
   id: sunsynk_esphome_setting_timezone2
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 251
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 252 Settings Timezone3
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Timezone3"
   id: sunsynk_esphome_setting_timezone3
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 252
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 253 Settings Timezone4
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Timezone4"
   id: sunsynk_esphome_setting_timezone4
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 253
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 254 Settings Timezone5
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Timezone5"
   id: sunsynk_esphome_setting_timezone5
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 254
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 255 Settings Timezone6
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Timezone6"
   id: sunsynk_esphome_setting_timezone6
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 255
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 268 Settings SoC Timezone1
   modbus_controller_id: sunsynk_esphome
   name: "SSetting SoC Timezone1"
   id: sunsynk_esphome_setting_soc_timezone1
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 268
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 269 Settings SoC Timezone2
   modbus_controller_id: sunsynk_esphome
   name: "SSetting SoC Timezone2"
   id: sunsynk_esphome_setting_soc_timezone2
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 269
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 270 Settings SoC Timezone3
   modbus_controller_id: sunsynk_esphome
   name: "SSetting SoC Timezone3"
   id: sunsynk_esphome_setting_soc_timezone3
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 270
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 271 Settings SoC Timezone4
   modbus_controller_id: sunsynk_esphome
   name: "SSetting SoC Timezone4"
   id: sunsynk_esphome_setting_soc_timezone4
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 271
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 272 Settings SoC Timezone5
   modbus_controller_id: sunsynk_esphome
   name: "SSetting SoC Timezone5"
   id: sunsynk_esphome_setting_soc_timezone5
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 272
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 273 Settings SoC Timezone6
   modbus_controller_id: sunsynk_esphome
   name: "SSetting SoC Timezone6"
   id: sunsynk_esphome_setting_soc_timezone6
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 273
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 256 Settings Sell Mode Timezone1
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Sell Mode Timezone1"
   id: sunsynk_esphome_setting_sellmode_timezone1
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 256
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 257 Settings Sell Mode Timezone2
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Sell Mode Timezone2"
   id: sunsynk_esphome_setting_sellmode_timezone2
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 257
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 258 Settings Sell Mode Timezone3
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Sell Mode Timezone3"
   id: sunsynk_esphome_setting_sellmode_timezone3
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 258
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 259 Settings Sell Mode Timezone4
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Sell Mode Timezone4"
   id: sunsynk_esphome_setting_sellmode_timezone4
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 259
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 260 Settings Sell Mode Timezone5
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Sell Mode Timezone5"
   id: sunsynk_esphome_setting_sellmode_timezone5
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 260
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 261 Settings Sell Mode Timezone6
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Sell Mode Timezone6"
   id: sunsynk_esphome_setting_sellmode_timezone6
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 261
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 245 Settings Export Limit
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Export Limit"
   id: sunsynk_esphome_setting_export_limit
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 245
   unit_of_measurement: "W"
   device_class: power
   state_class: measurement
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
           
 - platform: modbus_controller          # 217 Settings Battery Shutdown
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Battery Shutdown"
   id: sunsynk_esphome_setting_battery_shutdown
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 217
   unit_of_measurement: "%"
   device_class: battery
   state_class: measurement
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 219 Settings Battery Low
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Battery Low"
   id: sunsynk_esphome_setting_battery_low
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 219
   unit_of_measurement: "%"
   device_class: battery
   state_class: measurement
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 218 Settings Battery Restart
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Battery Restart"
   id: sunsynk_esphome_setting_battery_restart
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 218
   unit_of_measurement: "%"
   device_class: battery
   state_class: measurement
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 210 Settings Battery Max Charge Current
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Battery Max Charge Current"
   id: sunsynk_esphome_setting_battery_max_charge_current
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 210
   device_class: current
   state_class: measurement
   unit_of_measurement: "A"   
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 211 Settings Battery Max Discharge Current
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Max Discharge Current"
   id: sunsynk_esphome_setting_battery_max_discharge_current
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 211
   device_class: current
   state_class: measurement
   unit_of_measurement: "A"   
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
 - platform: modbus_controller          # 230 Settings Grid Charge Current
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Grid Charge Current"
   id: sunsynk_esphome_setting_grid_charge_current
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 230
   device_class: current
   state_class: measurement
   unit_of_measurement: "A"   
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;           
############################################### BINARY SENSORS ###############################################
binary_sensor:
 - platform: modbus_controller          # 194 Grid Connected Status
   modbus_controller_id: sunsynk_esphome
   name: "Grid Connected Status"
   id: sunsynk_esphome_grid_connected_status
   register_type: holding
   address: 194

############################################### BINARY SENSORS SETTINGS ###############################################  

 - platform: modbus_controller          # 248 Settings Use Timer Enabled
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Use Timer Enabled"
   id: sunsynk_esphome_setting_use_timer_enabled
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 248
   bitmask: 1

 - platform: modbus_controller          # 274 Settings Grid Charge Timezone1
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Grid Charge Timezone1"
   id: sunsynk_esphome_setting_grid_charge_timezone1
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 274

 - platform: modbus_controller          # 275 Settings Grid Charge Timezone2
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Grid Charge Timezone2"
   id: sunsynk_esphome_setting_grid_charge_timezone2
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 275
   
 - platform: modbus_controller          # 276 Settings Grid Charge Timezone3
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Grid Charge Timezone3"
   id: sunsynk_esphome_setting_grid_charge_timezone3
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 276
   
 - platform: modbus_controller          # 277 Settings Grid Charge Timezone4
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Grid Charge Timezone4"
   id: sunsynk_esphome_setting_grid_charge_timezone4
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 277
   
 - platform: modbus_controller          # 278 Settings Grid Charge Timezone5
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Grid Charge Timezone5"
   id: sunsynk_esphome_setting_grid_charge_timezone5
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 278
   
 - platform: modbus_controller          # 279 Settings Grid Charge Timezone6
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Grid Charge Timezone6"
   id: sunsynk_esphome_setting_grid_charge_timezone6
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 279

 - platform: modbus_controller          # 247 Settings Solar Export Enabled
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Solar Export Enabled"
   id: sunsynk_esphome_setting_solar_export_enabled
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 247

 - platform: modbus_controller          # 232 Settings Battery Grid Charge Enabled
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Battery Grid Charge Enabled"
   id: sunsynk_esphome_setting_battery_grid_charge_enabled
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 232


############################################### TEXT SENSORS SETTINGS ############################################### 
text_sensor:
 - platform: modbus_controller          # 243 Settings Energy Management Model (PL)
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Energy Management Model"
   id: sunsynk_esphome_setting_energy_management_model
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   raw_encode: HEXBYTES
   address: 243
   lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("Battery Priority Mode");
        case 1: return std::string("Load First Mode");
        default: return std::string("Unknown");
      }
 - platform: modbus_controller   # 244 Settings Load Limit Enabled
   modbus_controller_id: sunsynk_esphome
   name: "SSetting Load Limit Enabled"
   id: sunsynk_esphome_setting_load_limit
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 244
   raw_encode: HEXBYTES
   lambda: |-
     uint16_t value = modbus_controller::word_from_hex_str(x, 0);
     switch (value) {
       case 0: return std::string("selling first");
       case 1: return std::string("zero export and limit to load only");
       case 2: return std::string("zero export");
       default: return std::string("unknown");
     }
     return x;
 - platform: modbus_controller          # 059 Overall State
   modbus_controller_id: sunsynk_esphome
   name: "Overall State"
   id: sunsynk_esphome_overall_state
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   raw_encode: HEXBYTES
   address: 59
   lambda: |- 
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("standby");
        case 1: return std::string("selftest");
        case 2: return std::string("normal");
        case 3: return std::string("alarm");
        case 4: return std::string("fault");
        default: return std::string("unknown");
      }
